[[ch5]]
== Chapter 5 - Transactions

*DRAFT: DO NOT SUBMIT ISSUES OR PULL REQUEST YET, DRAFT IN PROGRESS AND FREQUENTLY MODIFIED*

[[ch5_intro]]
=== Introduction

Transactions are the most important part of the bitcoin system. Everything else in bitcoin is designed to ensure that transactions can be created, propagated on the network, validated, and finally added to the global ledger of transactions, the blockchain. Transactions are data structures that encode the transfer of value between participants in the bitcoin system. Each transaction is an public entry in bitcoin's global double-entry bookkeeping ledger, the blockchain. 

In this chapter we will examine all the various forms of transactions, what they contain, how to create them, how they are verified, and become part of the permanent record of all transactions. 

[[tx_lifecycle]]
=== Transaction Lifecycle

A transaction's lifecycle starts with the transaction's creation, also known as origination. The transaction is then signed, with one or more signatures indicating the authorization to spend the funds referenced by the transaction. The transaction is then broadcast on the bitcoin network, where each network node (participant) validates and propagates the transaction until it reaches (almost) every node in the network. Finally, the transaction is verified by a mining node and included in a block of transactions that is recorded on the blockchain. Once recorded on the blockchain and confirmed by sufficient subsequent blocks (confirmations), the transaction is a permanent part of the bitcoin ledger and is accepted as valid by all participants. The funds allocated to a new owner by the transaction can then be spend in a new transaction, extending the chain of ownership and beginning the lifecycle of a transaction again. 

[[tx_origination]]
==== Creating Transactions

In some ways it helps to think of a transaction in the same way as a paper cheque. Like a cheque, a transaction is an instrument that expresses the intent to transfer money and is not visible to the financial system until it is submitted for execution. Like a cheque, the originator of the transaction does not have to be the one signing the transaction. Transactions can be created online or offline by anyone, even if they are not able to sign for the funds spent by the check. While a cheque references a specific account as the source of the funds, a transaction references a specific previous transaction as its source (also known as an "input"), rather than an account. 

Once a transaction has been created, it is signed by the owner (or owners) of the source funds. If it was properly formed and signed, the signed transaction is now valid and contains all the information needed to execute the transfer of funds. Now, the valid transaction has to reach the bitcoin network so that it can be propagated until it reaches a miner for inclusion in the pubic ledger, the blockchain.

[[tx_bcast]]
==== Broadcasting Transactions to the Bitcoin Network

{Start with BTC is money into data structure - making it impossible to stop. Then mention the size of a typical transaction  - then methods to transmit. Typical transmission method. The extraordinary transmission options. No stopping }
Next, a transaction needs to be delivered to the bitcoin network so that it can be propagated and be included in the blockchain. In essence, a bitcoin transaction is just 300-400 bytes of data and has to reach any one of tens of thousands of bitcoin nodes. The sender does not need to trust the nodes they use to broadcast the transaction, as long as they use more than one to ensure that it propagates. The nodes don't need to trust the sender or establish the sender's "identity". Since the transaction is signed and contains no confidential information, private keys or credentials, it can be publicly broadcast using any underlying network transport that is convenient. Unlike credit card transactions, for example, which contain sensitive information and can only be transmitted on encrypted networks, a bitcoin transaction can be sent over any network. As long as the transaction can reach a bitcoin node that will propagate it into the bitcoin network, it doesn't matter how it is transported to the first node.  Bitcoin transactions can therefore be transmitted to the bitcoin network over insecure networks such as Wifi, Bluetooth, NFC, Chirp, barcodes or by copy and paste in a web form. In extreme cases, a bitcoin transaction could be transmitted over packet radio, satellite relay or shortwave using burst transmission, spread spectrum or frequency hoping to evade detection and jamming. A bitcoin transaction could even be encoded as smileys (emoticons) and posted in a public forum or sent as a text message or Skype chat message. Bitcoin has turned money into a data structure making it virtually impossible to stop anyone from creating and executing a bitcoin transaction. 

[[tx_propagation]]
==== Propagating Transactions on the Bitcoin Network

Once a bitcoin transaction is sent to any node connected to the bitcoin network, the transaction will be validated by that node and then propagated to all other nodes that it is connected to. The bitcoin network is a peer-to-peer network, meaning that it each bitcoin node is connected to a few other bitcoin nodes discovered through the peer-to-peer protocol. The entire network forms a loosely connected mesh without a fixed topology or any structure, making all nodes equal peers. Messages, including transactions and blocks are propagated from each node to the peers it is connected to. A new transaction injected into any node on the network will be sent to 3-4 of the neighboring nodes, each of which will send it to 3-4 more nodes and so on.  In this way, within a few seconds a valid transaction will propagate in an exponentially expanding ripple across the network until all connected nodes have received it. The bitcoin network is designed to propagate transactions and blocks to all nodes in an efficient and resilient manner that is resistant to attacks. To prevent spamming, denial of service attacks or other nuisance attacks agains the bitcoin system, every node will independently validate every transaction before propagating it further. A malformed transaction will not get beyond one node. The rules by which transactions are validated are explained in more detail in <<tx_validation>> 

[[tx_mining]]
==== Mining Transactions into Blocks

Transactions are grouped together into blocks, which are in turn linked in a long chain called the blockchain. This forms the authoritative ledger of all transactions since bitcoin's beginning in 2009. The blockchain is the subject of the next chapter, where we will examine the formation of the authoritative record through the competitive process of proof-of-work, also known as mining. 

Some of the nodes in the bitcoin network will be participating in "mining", trying to create new blocks of transactions. These mining nodes will collect all the transactions received since the last block and will include them in a new block. If a mining node is able to find the proof-of-work solution to a new block it will add that block to the blockchain and propagate the new block so that all other participants in the network can also add it to the blockchain. Once a transaction is added to the blockchain, the new owner of the funds can reference it in a new transaction and spend the funds. 


[[tx_structure]]
=== Transaction Structure

A transaction is a data structure that encodes a transfer of value from a source of funds, called an "input", to a destination, called an "output". Transaction inputs and outputs are not related to accounts or identities. Instead you should think of them as bitcoin amounts, chunks of bitcoin, being locked with a specific secret which only the owner can unlock. 

A transaction contains a number of fields, in addition to the inputs and outputs, as follows:
[[tx_data_structure]]
.The structure of a transaction
[options="header"]
|=======
|Size| Field | Description
| 4 bytes | Version | Specifies which rules this transaction follows
| 1-9 bytes (VarInt) | Input Counter | How many inputs are included
| Variable | Inputs | One or more Transaction Inputs
| 1-9 bytes (VarInt) | Output Counter | How many outputs are included
| Variable | Outputs | One or more Transaction Outputs
|=======

[[tx_inputs_outputs]]
=== Transaction Outputs and Inputs

Transactions move money from inputs to outputs, with each transaction's output becoming available as an input for subsequent transactions. When you send money to a friend, you are create "outputs" that your friend can spend. When your friend spends that money, their transaction uses as inputs the unspent outputs from your transaction and creates new outputs for whoever they are paying next. This way, transactions form a chain, with each transaction spending outputs from a previous transaction and creating new outputs. If you follow a transaction chain far enough backwards, you will arrive at a coinbase transaction, which is a transaction creating new bitcoins from mining. That's the only type of transaction that doesn't consume previous outputs but instead creates outputs from nothing. 

In this section we start by looking at transaction outputs, because you can't understand inputs without first understanding the outputs of a transaction. 

[TIP]
====
What comes first? Inputs or outputs, the chicken or the egg? Strictly speaking, outputs come first because coinbase transactions generate coins without inputs and create outputs from nothing. 
====

[[tx_outs]]
==== Transaction Outputs

Transaction outputs are, in a sense, the currency of the bitcoin system. They are the fundamental unit that is spent in a transaction and the fundamental building block of any transaction. Unspent Transaction Outputs, also known as UTXO are tracked by every full node bitcoin client in a database held in memory, called the UTXO set or UTXO pool. Any new transaction seen on the network must consume (spend) one or more of these outputs from the UTXO pool. 

===== Spending Conditions (Encumbrances)

Transactions create outputs by assigning a specific amount (in satoshis) to a specific _encumbrance_ or locking-script. In most cases the locking script will lock the output so that it can only be spent by the owner of a specific bitcoin address, thereby transferring ownership of that amount to the new owner. When Alice pays Bob's Cafe for a cup of coffee, her transaction is creating a coffee-amount output that is _encumbered_ or locked to Bob Cafe's bitcoin address. That output will be recorded on the blockchain and be part of the Unspent Transaction Output set corresponding to Bob's Cafe, meaning it will show in Bob's wallet as a balance until it is spent. When Bob chooses to spend that amount, his transaction releases the encumbrance, unlocking the output with a signature from Bob's private key. 

===== Unspent Transaction Outputs (UTXO)

From a technical perspective bitcoin doesn't have accounts or balances, it only has Unspent Transaction Outputs, referred to as UTXO. Balances and accounts are higher-level constructs that are created by summing all the UTXO available for spending under a specific address or more accurately by a specific private key. You wallet balance is nothing more than the sum of all UTXO available to spend with the keys in your wallet. 

[TIP]
====
The are no accounts or balances in bitcoin, only UTXO. 
====


[[tx_inputs]]
==== Transaction Inputs
===== Spending the Transaction Outputs
===== Unlocking the Conditions (Encumbrance Satisfaction)

[[tx_fees]]
==== Transaction Fees


=== Standard Transactions
==== Pay to Public Key Hash (P2PKH)
==== Simple Pubkey 
==== Mutli-Signature
==== Data Injection (OP_RETURN)
==== Pay to Script Hash (P2SH)
===== Redeem Script and isStandard Validation

=== Non-Standard Transactions

=== Transaction Scripts and Script Language

==== Scripting Language
==== Turing Incompleteness
==== Stateless Verification
==== Transaction Script Operands

==== Script Construction (Lock + Unlock)

[[scriptSig and scriptPubKey]]
.Combining scriptSig and scriptPubKey to evaluate a transaction script
image::images/scriptSig_and_scriptPubKey.png["scriptSig_and_scriptPubKey"]

=== Standard Transaction Scripts
==== Pay to Public Key Hash Script Example
[[P2PubKHash1]]
.Evaluating a script for a Pay-to-Public-Key-Hash transaction (Part 1 of 2)
image::images/Tx_Script_P2PubKeyHash_1.png["Tx_Script_P2PubKeyHash_1"]

[[P2PubKHash2]]
.Evaluating a script for a Pay-to-Public-Key-Hash transaction (Part 2 of 2)
image::images/Tx_Script_P2PubKeyHash_2.png["Tx_Script_P2PubKeyHash_2"]

==== Pubkey Script Example
==== Multi-Signature Scripts Example
==== P2SH Script Example

=== Scripts and Signatures
==== Elliptic Curve Digital Signature Algorithm
===== Signing with the Private Key
===== Validating a Digital Signature
==== Types of Signature Hashes

=== Transaction Malleability
